
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  countryCode: 'countryCode',
  phoneNumber: 'phoneNumber',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organisationId: 'organisationId'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  scopes: 'scopes',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  state: 'state',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  dayOfMonth: 'dayOfMonth',
  createdOrgId: 'createdOrgId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  landlineNumber: 'landlineNumber',
  regionId: 'regionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organisationId: 'organisationId',
  type: 'type',
  pointOfContactId: 'pointOfContactId'
};

exports.Prisma.OrganisationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactOrgId: 'contactOrgId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  tagType: 'tagType',
  createdOrganisationId: 'createdOrganisationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  addedById: 'addedById',
  needFollowUp: 'needFollowUp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  contactId: 'contactId',
  followUpDate: 'followUpDate',
  assignedToId: 'assignedToId',
  followUpActivityId: 'followUpActivityId'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactId: 'contactId',
  createdById: 'createdById'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  alternateNumber: 'alternateNumber',
  branchId: 'branchId',
  contactType: 'contactType',
  leadSegment: 'leadSegment',
  leadScore: 'leadScore',
  followUpFrequency: 'followUpFrequency',
  followUpOn: 'followUpOn',
  assignedToId: 'assignedToId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactOrgId: 'contactOrgId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  countryCode: 'countryCode',
  phoneNumber: 'phoneNumber',
  organisationId: 'organisationId'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.TokenOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken'
};

exports.Prisma.RegionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  state: 'state',
  country: 'country'
};

exports.Prisma.ScheduleOrderByRelevanceFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  createdOrgId: 'createdOrgId'
};

exports.Prisma.BranchOrderByRelevanceFieldEnum = {
  id: 'id',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  landlineNumber: 'landlineNumber',
  regionId: 'regionId',
  organisationId: 'organisationId',
  pointOfContactId: 'pointOfContactId'
};

exports.Prisma.OrganisationOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  contactOrgId: 'contactOrgId'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdOrganisationId: 'createdOrganisationId'
};

exports.Prisma.ActivityOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  addedById: 'addedById',
  contactId: 'contactId',
  assignedToId: 'assignedToId',
  followUpActivityId: 'followUpActivityId'
};

exports.Prisma.NoteOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  contactId: 'contactId',
  createdById: 'createdById'
};

exports.Prisma.ContactOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  alternateNumber: 'alternateNumber',
  branchId: 'branchId',
  assignedToId: 'assignedToId',
  contactOrgId: 'contactOrgId'
};
exports.Role = exports.$Enums.Role = {
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN'
};

exports.Scope = exports.$Enums.Scope = {
  CALENDAR: 'CALENDAR',
  YOUTUBE: 'YOUTUBE',
  EMAIL: 'EMAIL',
  PROFILE: 'PROFILE',
  OPENID: 'OPENID',
  SHEETS: 'SHEETS',
  DOCS: 'DOCS'
};

exports.BranchType = exports.$Enums.BranchType = {
  HEADQUARTERS: 'HEADQUARTERS',
  BRANCH: 'BRANCH'
};

exports.TagType = exports.$Enums.TagType = {
  ORGANISATION: 'ORGANISATION',
  CONTACT: 'CONTACT',
  ACTIVITY: 'ACTIVITY'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  ENQUIRY: 'ENQUIRY',
  QUOTATION_REQUEST: 'QUOTATION_REQUEST',
  PURCHASE_ORDER: 'PURCHASE_ORDER',
  INVOICE: 'INVOICE',
  PAYMENT: 'PAYMENT',
  DELIVERY: 'DELIVERY',
  RETURN: 'RETURN',
  COMPLAINT: 'COMPLAINT',
  MISCELLANEOUS: 'MISCELLANEOUS'
};

exports.NoteCategory = exports.$Enums.NoteCategory = {
  CALL: 'CALL',
  CONTACT: 'CONTACT',
  ENQUIRY: 'ENQUIRY',
  QUOTATION: 'QUOTATION',
  PURCHASE: 'PURCHASE',
  MISCELLANEOUS: 'MISCELLANEOUS'
};

exports.ContactType = exports.$Enums.ContactType = {
  LEAD: 'LEAD',
  PROSPECT: 'PROSPECT',
  CUSTOMER: 'CUSTOMER'
};

exports.LeadSegment = exports.$Enums.LeadSegment = {
  HOT: 'HOT',
  WARM: 'WARM',
  COLD: 'COLD'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Token: 'Token',
  Region: 'Region',
  Schedule: 'Schedule',
  Branch: 'Branch',
  Organisation: 'Organisation',
  Tag: 'Tag',
  Activity: 'Activity',
  Note: 'Note',
  Contact: 'Contact'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
